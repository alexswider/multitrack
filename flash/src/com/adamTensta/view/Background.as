package com.adamTensta.view{
	/*
		resposible for animation and all music visualization effects
	
	*/
	import com.adamTensta.commands.Constants;
	import com.adamTensta.commands.Model;
	import com.adamTensta.events.ModelEvent;
	import com.carlcalderon.arthropod.Debug;
	import com.greensock.TweenMax;
	
	import flash.display.MovieClip;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.events.AsyncErrorEvent;
	import flash.events.Event;
	import flash.events.NetStatusEvent;
	import flash.media.Video;
	import flash.net.NetConnection;
	import flash.net.NetStream;
	import flash.net.NetStreamAppendBytesAction;
	
	public class Background extends MovieClip{

		private var _model:Model;
		private var triangleHeight:int = 200;
		private var triangleShape:Shape; 
		private var linesShape:Shape;

		private var raysAmount:uint =60;
		private var spr:Sprite;

		public var anim_mc:MovieClip;

//stream vars		
		private var MyVideo:Video;
		private var MyNC:NetConnection;
		private var MyNS:NetStream;
		private var trackLoopStage:Number = 0;
		
		public function Background(){

			_model = Model.getInstance();
			_model.addEventListener(ModelEvent.RESIZE_STAGE, resizeHandler);
			_model.addEventListener(ModelEvent.ROOM_RECEIVED, roomChange)
			_model.addEventListener(ModelEvent.ROOM_CREATED, roomChange)
			_model.addEventListener(ModelEvent.ROOM_UPDATE, roomChange)
			
			
			_model.addEventListener(ModelEvent.SHOW_TEST, showTest)
			_model.addEventListener(ModelEvent.SHOW_TESTEND, testEnd)
			
			addEventListener(Event.ADDED_TO_STAGE, added);
			
			
		}

		private function added(e:Event):void{
			removeEventListener(Event.ADDED_TO_STAGE, added);
			//init();
		}
		
		private function init():void{
			MyVideo = new Video(1280,640);
			anim_mc.addChild(MyVideo);
			
			MyNC = new NetConnection();
			
			
			
			
			
			MyNC.connect(null);
			
			MyNS = new NetStream(MyNC);
			
			MyNS.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler); 
			MyNS.addEventListener(NetStatusEvent.NET_STATUS, onNetStatus);
			
			
			
			MyVideo.attachNetStream(MyNS);
			MyNS.bufferTime = 10;
			MyNS.play(Constants._BasePathFLV+"test.mp4");
			MyNS.pause();
			MyVideo.visible= false;
			
			//the clouds.flv video has metadata we're not using, so create
			//an error handler to ignore the message generated by the runtime
			//about the metadata
			
			
			
			
		}
		
		
		private function onNetStatus(e:NetStatusEvent):void{
			var code:String=e.info.code;
			Debug.log("NS:"+code);
			_model.l(code);
			switch(code)
			{
				case "NetStream.Buffer.Empty":
				case "NetStream.Play.Stop":
					MyNS.seek(0);
					//                  seekToBeginning();
					break;
				case "NetStream.Seek.Notify":
					var seekPoint:Number = e.info.seekPoint;
					_model.l("seeking to: ", seekPoint);
					seekPoint == 0 ? seekToBeginning() : seekToOffset(seekPoint);
					break;
			}
		}
		
		private function seekToBeginning():void
		{
			//MyNS.appendBytesAction(NetStreamAppendBytesAction.RESET_BEGIN);
			//MyNS.appendBytes(bytes);
			//MyNS.appendBytesAction(NetStreamAppendBytesAction.END_SEQUENCE);
		}
		
		
		
		private function seekToOffset(seekPoint:Number):void
		{
			//MyNS.appendBytesAction(NetStreamAppendBytesAction.RESET_SEEK);
			// todo
		}
//for kendrik		
		private function showTest(e:ModelEvent):void{
			MyVideo.visible= true;
			MyNS.resume();
		}
		private function testEnd(e:ModelEvent):void{
			TweenMax.to(MyVideo,.5,{autoAlpha:0});
		}
		
		
		private function roomChange(e:ModelEvent):void{
			trackLoopStage = _model.currentTracks.length;
			
			
			
			switch(trackLoopStage){
				case 1:
					MyVideo.visible= true;
					MyNS.resume();
				break;
				
				case 2:
					MyNS.play(Constants._BasePathFLV+"test2.f4v");
				break;
				
				case 3:
					MyNS.play(Constants._BasePathFLV+"test3.f4v");
				break
				
				case 4:
					MyNS.play(Constants._BasePathFLV+"test4.f4v");
				break;
				
				case 5:
					MyNS.play(Constants._BasePathFLV+"test5.f4v");
				break;
				
				case 6:
					MyNS.play(Constants._BasePathFLV+"test6.f4v");
					break;
				
				default:
					MyNS.play(Constants._BasePathFLV+"test5.f4v");
			}
			
			
		}
		
		
		private  function asyncErrorHandler(event:AsyncErrorEvent):void 
		{ 
			_model.l("BG:error:"+event.error);
		} 
		
		
		private function resizeHandler(e:ModelEvent):void{
			Debug.log("background:ResizeStage");
			anim_mc.x = (_model.StageWidth -anim_mc.width) /2; 
			anim_mc.y = (_model.StageHeight -anim_mc.height)/2;
			
			
			//spr.x = _model.StageWidth/2;
			//spr.y = _model.StageHeight/2;
		}

	}

}



/*
private function init():void{

spr = new Sprite();

for(var i:int = -180; i<180 ; i+=(360/raysAmount)){
var ray:Ray = new Ray();
spr.addChild(ray);
ray.width = 2;
ray.height = _model.StageWidth*.75;

ray.rotation = i;
}

addChild(spr);
spr.x = _model.StageWidth/2;
spr.y = _model.StageHeight/2;
//triangle
triangleShape = new Shape();
triangleShape.graphics.lineStyle(1,0x000)
triangleShape.graphics.beginFill(0x000);
triangleShape.graphics.moveTo(triangleHeight/2, 0);
triangleShape.graphics.lineTo(triangleHeight, triangleHeight);
triangleShape.graphics.lineTo(0, triangleHeight);
triangleShape.graphics.lineTo(triangleHeight/2, 0);
addChild(triangleShape);
triangleShape.x = (_model.StageWidth -triangleHeight) /2; 
triangleShape.y = (_model.StageHeight -triangleHeight)/2;

}
*/